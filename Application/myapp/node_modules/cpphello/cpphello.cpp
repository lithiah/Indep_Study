#include <pthread.h>
#include <unistd.h>
#include <node.h>
#include <v8.h>

using namespace v8;

Handle<Value> Method(const Arguments& args) {
    HandleScope scope;
    return scope.Close(String::New("world"));
}

Handle<Value> timesTwo(const Arguments& args) {
    HandleScope scope;
    Local<Number> num = Number::New(args[0]->NumberValue() * 2);
    return scope.Close(num);
}

///////////////////////////////////////////////////////

void* message_function( void *ptr )
{
   char* message;
   message = (char*) ptr;
   *message = 'a';
}

Handle<Value> MainSetup(const Arguments& args) {
    HandleScope scope;

    pthread_t thread;
    char message [6] = "Hello";

    pthread_create(&thread, NULL, message_function, (void*) message);
    pthread_join(thread, NULL);

    return scope.Close(String::New(message));
}

///////////////////////////////////////////////////////

struct storestuff {
   int half;
   int sum;
   int max;
};

void* add_values(void *ptr) {
    struct storestuff * local_ptr = (struct storestuff *) ptr;

    int half = local_ptr->half;
    int max = local_ptr->max;
    int mymin, mymax;

    local_ptr->sum = 0;

    if (half == 1) {
        mymin = 1;
        mymax = max / 2;
    }
    else {
        mymin = max / 2 + 1;
        if (!(mymin % 2))
            mymin++;
        mymax = max;
    }

    while (mymin <= mymax) {
        local_ptr->sum += mymin;
        mymin += 2;
    }
}

Handle<Value> threadSum(const Arguments& args) {
    HandleScope scope;

    pthread_t thread1, thread2;
    int final_sum;
    struct storestuff * ptr1;
    struct storestuff * ptr2;

    ptr1= new storestuff;
    ptr2= new storestuff;
    ptr1->max = args[0]->IntegerValue(); //user input from form
    ptr2->max = ptr1->max;

    ptr1->half = 1;
    pthread_create( &thread1, NULL, add_values, (void *) ptr1);
    ptr2->half = 2;
    pthread_create(&thread2, NULL, add_values, (void *) ptr2);

    pthread_join (thread1, NULL);
    final_sum = ptr1->sum;
    pthread_join (thread2, NULL);
    final_sum += ptr2->sum;

    return scope.Close(Number::New(final_sum));
}

///////////////////////////////////////////////////////

void init(Handle<Object> target) {
    NODE_SET_METHOD(target, "hello", Method);
    NODE_SET_METHOD(target, "timesTwo", timesTwo);
    NODE_SET_METHOD(target, "threadTest", MainSetup);
    NODE_SET_METHOD(target, "threadSum", threadSum);
}

NODE_MODULE(cpphello, init)
