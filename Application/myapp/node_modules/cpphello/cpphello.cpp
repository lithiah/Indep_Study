#include <pthread.h>
#include <unistd.h>
#include <node.h>
#include <v8.h>

using namespace v8;

Handle<Value> Method(const Arguments& args) {
    HandleScope scope;
    return scope.Close(String::New("world"));
}

Handle<Value> Yo(const Arguments& args) {
    HandleScope scope;

    Local<Number> num = Number::New(args[0]->NumberValue() * 2);

    return scope.Close(num);
}

void* message_function( void *ptr )
{
   char* message;
   message = (char*) ptr;
   *message = 'a';
}

Handle<Value> MainSetup(const Arguments& args) {
    HandleScope scope;

    pthread_t thread;
    char message [6] = "Hello";

    pthread_create(&thread, NULL, message_function, (void*) message);
    pthread_join(thread, NULL);

    return scope.Close(String::New(message));
}

void init(Handle<Object> target) {
    NODE_SET_METHOD(target, "hello", Method);
    NODE_SET_METHOD(target, "foo", Yo);
    NODE_SET_METHOD(target, "threadTest", MainSetup);
}

NODE_MODULE(cpphello, init)
